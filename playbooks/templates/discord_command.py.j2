import discord
import asyncio
from mcrcon import MCRcon

TOKEN = '{{ discord_bot_token }}'  # Discord Bot Token
WHITELIST_CHANNEL_ID = {{ whitelist_channel_id }} # Discord チャンネルID
COMMAND_CHANNEL_ID = {{ command_channel_id }}
RCON_HOST = 'localhost'  # RCON ホスト
RCON_PORT = 25575  # RCON ポート
RCON_PASSWORD = '{{ rcon_password }}'  # RCON パスワード

intents = discord.Intents.default()
intents.messages = True  # メッセージのインテントを有効化
intents.message_content = True
client = discord.Client(intents=intents)

# Discord メッセージを監視して、Minecraftサーバーにコマンドを送信
@client.event
async def on_message(message):
    # ボット自身のメッセージは無視
    if message.author == client.user:
        return
    
    print(message)

    # 特定のチャンネルでのみコマンドを受け付ける
    if message.channel.id == COMMAND_CHANNEL_ID:
        # RCON 経由で Minecraft サーバーにメッセージを送信
        try:
            with MCRcon(RCON_HOST, RCON_PASSWORD, RCON_PORT) as mcr:
                response = mcr.command(message.content)
                await message.channel.send(f"実行したコマンド: {message.content}")
                await message.channel.send(f"Response: {response}")
        except Exception as e:
            await message.channel.send(f"Error: {e}")
    
    if message.channel.id == WHITELIST_CHANNEL_ID:
        try:
            with MCRcon(RCON_HOST, RCON_PASSWORD, RCON_PORT) as mcr:
                response = mcr.command(f'/whitelist add {message.content}')
                await message.channel.send(f"ホワイトリストに {message.content} を追加しました。")
                await message.channel.send(f"Response: {response}")
        except Exception as e:
            await message.channel.send(f"Error: {e}")

@client.event
async def on_ready():
    print(f'Logged in as {client.user}')

# メインの非同期関数
async def main():
    # ボットを起動し、ログ監視を開始
    await client.start(TOKEN)

# 非同期処理の実行
if __name__ == "__main__":
    asyncio.run(main())
